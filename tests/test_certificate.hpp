/*
   Part of the webThread Project (https://github.com/cpp4ever/webthread), under the MIT License
   SPDX-License-Identifier: MIT

   Copyright (c) 2024 Mikhail Smirnov

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the Software), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.
*/

#pragma once

#include <array> ///< for std::to_array
#if (201806L <= __cpp_lib_bit_cast)
#  include <bit> ///< for std::bit_cast
#endif
#include <cstdint> ///< for uint8_t
#include <string_view> ///< for std::string_view

[[maybe_unused]] constexpr auto test_webthread_domain = std::string_view{"webthread.test"};

/// Self-signed ssl certificate for test_webthread_domain:
/// openssl req -x509 -newkey rsa:2048 -sha256 -days 5000 -nodes -keyout webthread.key -out webthread.pem -subj "/CN=webthread.test"
[[maybe_unused, nodiscard]] constexpr std::string_view test_webthread_certificate_pem() noexcept
{
   return
   {
      R"raw(
-----BEGIN CERTIFICATE-----
MIIDEzCCAfugAwIBAgIUILGsWhY1RsqjwOGxNJY7+JFD3/swDQYJKoZIhvcNAQEL
BQAwGTEXMBUGA1UEAwwOd2VidGhyZWFkLnRlc3QwHhcNMjQwODAxMTY0ODU1WhcN
MzgwNDEwMTY0ODU1WjAZMRcwFQYDVQQDDA53ZWJ0aHJlYWQudGVzdDCCASIwDQYJ
KoZIhvcNAQEBBQADggEPADCCAQoCggEBAPLGDJxRGwdWPdhcxYe8YixgOkUiNSMq
PKPnTEKIXDYbezvu2rMOzW1R6Ot6Rfv8rcMSEpSTAA4rsYpy9OCbyYPFCUhMKd8A
Tbjfd308ynQ/MWARkLRYWPGMfXu2Srot8cEWIERA1dlUI72O6Ntg0mjsO46iHcvN
0qOzBtWU2eLwJhGSYy/D4m3tReOp9iUCZHHmAuPsmFheIMmBLJ8uDPG8gRaLMHuI
Lbd+zLOVz1J/qD45wrj5lFiqDsFltPqT4N9sTXxiEW388GmYOUdnP2XzCDs7dits
c+C3mG9lpfsASGHmj18o/X4awHuDv3iD90SU76W1+ITbgDD/AA74URMCAwEAAaNT
MFEwHQYDVR0OBBYEFJ7cqA85g+Rse1TJYPQ4gzJWfTvdMB8GA1UdIwQYMBaAFJ7c
qA85g+Rse1TJYPQ4gzJWfTvdMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQEL
BQADggEBAFaGVvRj3r7eaNME6UF8uRDPwcUs/k5v1zMwsVZDPFAWBeXb6570a0Ix
DeeaM3IyLeWsHxV44kzOodguK0NDSwY9F0q+NUbbH0iCR466/ktRUr7PRB8bMdzU
FTOVszc1ibMOuO5YA+byASSZk0Zl/nJynw0GLlFCXPp3neTU2d22riqAuU4BRNt6
AvBvjbzupn1aJgMfvLRVyPysu6HMKTTCgwc+c6NtYvfNqmlem1gzjzf7AqJNnoqv
AoTA7BKPHKZc+NRijI+td2UM+yEG/2b9ciQ9sQETKyT5oB4n85Fj+PM94yqnEwTA
nV46x8cf80/02OLeyG3APCEjoCmEYa8=
-----END CERTIFICATE-----
)raw"
   };
}

[[maybe_unused, nodiscard]] constexpr std::string_view test_webthread_private_key_rsa() noexcept
{
   return
   {
      R"raw(
-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDyxgycURsHVj3Y
XMWHvGIsYDpFIjUjKjyj50xCiFw2G3s77tqzDs1tUejrekX7/K3DEhKUkwAOK7GK
cvTgm8mDxQlITCnfAE2433d9PMp0PzFgEZC0WFjxjH17tkq6LfHBFiBEQNXZVCO9
jujbYNJo7DuOoh3LzdKjswbVlNni8CYRkmMvw+Jt7UXjqfYlAmRx5gLj7JhYXiDJ
gSyfLgzxvIEWizB7iC23fsyzlc9Sf6g+OcK4+ZRYqg7BZbT6k+DfbE18YhFt/PBp
mDlHZz9l8wg7O3YrbHPgt5hvZaX7AEhh5o9fKP1+GsB7g794g/dElO+ltfiE24Aw
/wAO+FETAgMBAAECggEAIf5COMcQgkv8l+WRkQp7Mpx8vD5oc1aQLCEQaAaA5uCd
NkyhGc5aTFLaStKRpxF/4R8QM/aLXPCYSPsEt8iIhGdb/+AOQtffiiHcMNCIxpMs
njeHbAEs3xGdZmuldgFF5xPqi7QKXYZvBLVUfJdHjwJ46mVfx7A3rM0+CTzw71oM
Ibpu/vN0v+Rk/f7NwK4WVPnhtaPStaWl9+8BoNvIiIrQp0jmFJUB1RPuYG4BRbaz
TWykuAKrMa8ihP4sNuUm6nNz4S9uPU1SLEmWjTDYA6E1pXLXe6Gz9g+rce9XKaRJ
ablmWNHJho13doTuTli7MftJbijj5AU2HG0UYjI3vQKBgQD6iBJS/EzYgINjRKky
FzU5G0COjUgxDW27GRA5+b3dWjGJlkvlvOEz6JN+Q7CBtjIQqdc6Sl63NS4y/Dqu
zHGwlHbmIZ9wWxo1einbzSaaOR4Q4AuwGvkHSKH1YFbzusmi7EQhIl46N4+fnY4R
WKND2nT0yWL9UW01AguQCKXzxwKBgQD4EqC5jhrVG6ZCIXh6+i4cu4DR7vX3MCXK
HgzytK/EWHF6JDZh7Y8nY+I2j5OSfziLCUpM0zhIaHNp8gkb8DDznPsAeq4c4C44
nBvAa/GwpESlQ4tAQWCssd85Fnvs9hd0n/lUMG4Fu0QkpcNxIhgzkat/PCulA7k4
6CRjiG6gVQKBgFO7xuQVj1mNGlzDRgmH2DIN+bWrYsWCR3qRFetKnTquOoBRy2wt
hNdklGdPGF9CFdmb6mOBF8cD7zz7MGHb0uPBuzuPYUqcKFZXTkY4ev5wuKvLNhzV
5wWYMQlh+a3ccCgT73Fjmzq59zbR4fnKNkcnbI+j/4HLBUUCOfsZ6N1hAoGBANj/
8nheRjqEpTrT7IAmuI+JtXXuglpoU6YqA0mLpPUsKJefdbLUC5V5Wjg//+b2Qo/c
4JGzclhkhhD3F+DIiwmPGEGjDwtTTxtV8zCvPAw4pZOrMfRTPC3Uql9Vu7Hc00fB
aGistJFu7nzgQ8aC/IiftFToXYVLbIrLBonKnnrBAoGAQR4GXsyJPvmEtVAvP/yt
ndNVBGfZxo1enSIpOIfG7mhVHzQA4tODikMYiWnucTvddfswU8BkskKiBWW5ayAP
e8ItZkw3H6JYDA3vGlTqwXeerbVR9SGczHueMokAIjSiHTG1HpSpjFtl4pIC2z9R
zR1FSX3tsG8VHpPqzhDCuac=
-----END PRIVATE KEY-----
)raw"
   };
}

/// openssl x509 -in webthread.pem -inform PEM -out webthread.der -outform DER
[[maybe_unused]] constexpr auto test_webthread_certificate_der_raw = std::to_array<uint8_t>(
   {
      0x30, 0x82, 0x03, 0x13, 0x30, 0x82, 0x01, 0xFB, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x14, 0x20,
      0xB1, 0xAC, 0x5A, 0x16, 0x35, 0x46, 0xCA, 0xA3, 0xC0, 0xE1, 0xB1, 0x34, 0x96, 0x3B, 0xF8, 0x91,
      0x43, 0xDF, 0xFB, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B,
      0x05, 0x00, 0x30, 0x19, 0x31, 0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x77,
      0x65, 0x62, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x2E, 0x74, 0x65, 0x73, 0x74, 0x30, 0x1E, 0x17,
      0x0D, 0x32, 0x34, 0x30, 0x38, 0x30, 0x31, 0x31, 0x36, 0x34, 0x38, 0x35, 0x35, 0x5A, 0x17, 0x0D,
      0x33, 0x38, 0x30, 0x34, 0x31, 0x30, 0x31, 0x36, 0x34, 0x38, 0x35, 0x35, 0x5A, 0x30, 0x19, 0x31,
      0x17, 0x30, 0x15, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x0E, 0x77, 0x65, 0x62, 0x74, 0x68, 0x72,
      0x65, 0x61, 0x64, 0x2E, 0x74, 0x65, 0x73, 0x74, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0D, 0x06, 0x09,
      0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0F, 0x00,
      0x30, 0x82, 0x01, 0x0A, 0x02, 0x82, 0x01, 0x01, 0x00, 0xF2, 0xC6, 0x0C, 0x9C, 0x51, 0x1B, 0x07,
      0x56, 0x3D, 0xD8, 0x5C, 0xC5, 0x87, 0xBC, 0x62, 0x2C, 0x60, 0x3A, 0x45, 0x22, 0x35, 0x23, 0x2A,
      0x3C, 0xA3, 0xE7, 0x4C, 0x42, 0x88, 0x5C, 0x36, 0x1B, 0x7B, 0x3B, 0xEE, 0xDA, 0xB3, 0x0E, 0xCD,
      0x6D, 0x51, 0xE8, 0xEB, 0x7A, 0x45, 0xFB, 0xFC, 0xAD, 0xC3, 0x12, 0x12, 0x94, 0x93, 0x00, 0x0E,
      0x2B, 0xB1, 0x8A, 0x72, 0xF4, 0xE0, 0x9B, 0xC9, 0x83, 0xC5, 0x09, 0x48, 0x4C, 0x29, 0xDF, 0x00,
      0x4D, 0xB8, 0xDF, 0x77, 0x7D, 0x3C, 0xCA, 0x74, 0x3F, 0x31, 0x60, 0x11, 0x90, 0xB4, 0x58, 0x58,
      0xF1, 0x8C, 0x7D, 0x7B, 0xB6, 0x4A, 0xBA, 0x2D, 0xF1, 0xC1, 0x16, 0x20, 0x44, 0x40, 0xD5, 0xD9,
      0x54, 0x23, 0xBD, 0x8E, 0xE8, 0xDB, 0x60, 0xD2, 0x68, 0xEC, 0x3B, 0x8E, 0xA2, 0x1D, 0xCB, 0xCD,
      0xD2, 0xA3, 0xB3, 0x06, 0xD5, 0x94, 0xD9, 0xE2, 0xF0, 0x26, 0x11, 0x92, 0x63, 0x2F, 0xC3, 0xE2,
      0x6D, 0xED, 0x45, 0xE3, 0xA9, 0xF6, 0x25, 0x02, 0x64, 0x71, 0xE6, 0x02, 0xE3, 0xEC, 0x98, 0x58,
      0x5E, 0x20, 0xC9, 0x81, 0x2C, 0x9F, 0x2E, 0x0C, 0xF1, 0xBC, 0x81, 0x16, 0x8B, 0x30, 0x7B, 0x88,
      0x2D, 0xB7, 0x7E, 0xCC, 0xB3, 0x95, 0xCF, 0x52, 0x7F, 0xA8, 0x3E, 0x39, 0xC2, 0xB8, 0xF9, 0x94,
      0x58, 0xAA, 0x0E, 0xC1, 0x65, 0xB4, 0xFA, 0x93, 0xE0, 0xDF, 0x6C, 0x4D, 0x7C, 0x62, 0x11, 0x6D,
      0xFC, 0xF0, 0x69, 0x98, 0x39, 0x47, 0x67, 0x3F, 0x65, 0xF3, 0x08, 0x3B, 0x3B, 0x76, 0x2B, 0x6C,
      0x73, 0xE0, 0xB7, 0x98, 0x6F, 0x65, 0xA5, 0xFB, 0x00, 0x48, 0x61, 0xE6, 0x8F, 0x5F, 0x28, 0xFD,
      0x7E, 0x1A, 0xC0, 0x7B, 0x83, 0xBF, 0x78, 0x83, 0xF7, 0x44, 0x94, 0xEF, 0xA5, 0xB5, 0xF8, 0x84,
      0xDB, 0x80, 0x30, 0xFF, 0x00, 0x0E, 0xF8, 0x51, 0x13, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3, 0x53,
      0x30, 0x51, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04, 0x16, 0x04, 0x14, 0x9E, 0xDC, 0xA8,
      0x0F, 0x39, 0x83, 0xE4, 0x6C, 0x7B, 0x54, 0xC9, 0x60, 0xF4, 0x38, 0x83, 0x32, 0x56, 0x7D, 0x3B,
      0xDD, 0x30, 0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0x9E, 0xDC,
      0xA8, 0x0F, 0x39, 0x83, 0xE4, 0x6C, 0x7B, 0x54, 0xC9, 0x60, 0xF4, 0x38, 0x83, 0x32, 0x56, 0x7D,
      0x3B, 0xDD, 0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x05, 0x30, 0x03,
      0x01, 0x01, 0xFF, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x01, 0x0B,
      0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x56, 0x86, 0x56, 0xF4, 0x63, 0xDE, 0xBE, 0xDE, 0x68,
      0xD3, 0x04, 0xE9, 0x41, 0x7C, 0xB9, 0x10, 0xCF, 0xC1, 0xC5, 0x2C, 0xFE, 0x4E, 0x6F, 0xD7, 0x33,
      0x30, 0xB1, 0x56, 0x43, 0x3C, 0x50, 0x16, 0x05, 0xE5, 0xDB, 0xEB, 0x9E, 0xF4, 0x6B, 0x42, 0x31,
      0x0D, 0xE7, 0x9A, 0x33, 0x72, 0x32, 0x2D, 0xE5, 0xAC, 0x1F, 0x15, 0x78, 0xE2, 0x4C, 0xCE, 0xA1,
      0xD8, 0x2E, 0x2B, 0x43, 0x43, 0x4B, 0x06, 0x3D, 0x17, 0x4A, 0xBE, 0x35, 0x46, 0xDB, 0x1F, 0x48,
      0x82, 0x47, 0x8E, 0xBA, 0xFE, 0x4B, 0x51, 0x52, 0xBE, 0xCF, 0x44, 0x1F, 0x1B, 0x31, 0xDC, 0xD4,
      0x15, 0x33, 0x95, 0xB3, 0x37, 0x35, 0x89, 0xB3, 0x0E, 0xB8, 0xEE, 0x58, 0x03, 0xE6, 0xF2, 0x01,
      0x24, 0x99, 0x93, 0x46, 0x65, 0xFE, 0x72, 0x72, 0x9F, 0x0D, 0x06, 0x2E, 0x51, 0x42, 0x5C, 0xFA,
      0x77, 0x9D, 0xE4, 0xD4, 0xD9, 0xDD, 0xB6, 0xAE, 0x2A, 0x80, 0xB9, 0x4E, 0x01, 0x44, 0xDB, 0x7A,
      0x02, 0xF0, 0x6F, 0x8D, 0xBC, 0xEE, 0xA6, 0x7D, 0x5A, 0x26, 0x03, 0x1F, 0xBC, 0xB4, 0x55, 0xC8,
      0xFC, 0xAC, 0xBB, 0xA1, 0xCC, 0x29, 0x34, 0xC2, 0x83, 0x07, 0x3E, 0x73, 0xA3, 0x6D, 0x62, 0xF7,
      0xCD, 0xAA, 0x69, 0x5E, 0x9B, 0x58, 0x33, 0x8F, 0x37, 0xFB, 0x02, 0xA2, 0x4D, 0x9E, 0x8A, 0xAF,
      0x02, 0x84, 0xC0, 0xEC, 0x12, 0x8F, 0x1C, 0xA6, 0x5C, 0xF8, 0xD4, 0x62, 0x8C, 0x8F, 0xAD, 0x77,
      0x65, 0x0C, 0xFB, 0x21, 0x06, 0xFF, 0x66, 0xFD, 0x72, 0x24, 0x3D, 0xB1, 0x01, 0x13, 0x2B, 0x24,
      0xF9, 0xA0, 0x1E, 0x27, 0xF3, 0x91, 0x63, 0xF8, 0xF3, 0x3D, 0xE3, 0x2A, 0xA7, 0x13, 0x04, 0xC0,
      0x9D, 0x5E, 0x3A, 0xC7, 0xC7, 0x1F, 0xF3, 0x4F, 0xF4, 0xD8, 0xE2, 0xDE, 0xC8, 0x6D, 0xC0, 0x3C,
      0x21, 0x23, 0xA0, 0x29, 0x84, 0x61, 0xAF
   }
);
[[maybe_unused, nodiscard]]
#if (201806L <= __cpp_lib_bit_cast)
constexpr
#else
inline
#endif
std::string_view test_webthread_certificate_der() noexcept
{
   return
   {
#if (201806L <= __cpp_lib_bit_cast)
      std::bit_cast<char const *>(test_webthread_certificate_der_raw.data()),
#else
      reinterpret_cast<char const *>(test_webthread_certificate_der_raw.data()),
#endif
      test_webthread_certificate_der_raw.size()
   };
}

/// openssl pkcs12 -export -in webthread.pem -inkey webthread.key -out webthread.p12
[[maybe_unused]] constexpr auto test_webthread_certificate_p12_raw = std::to_array<uint8_t>(
   {
      0x30, 0x82, 0x09, 0xDF, 0x02, 0x01, 0x03, 0x30, 0x82, 0x09, 0x95, 0x06, 0x09, 0x2A, 0x86, 0x48,
      0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x82, 0x09, 0x86, 0x04, 0x82, 0x09, 0x82, 0x30, 0x82,
      0x09, 0x7E, 0x30, 0x82, 0x03, 0xF2, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07,
      0x06, 0xA0, 0x82, 0x03, 0xE3, 0x30, 0x82, 0x03, 0xDF, 0x02, 0x01, 0x00, 0x30, 0x82, 0x03, 0xD8,
      0x06, 0x09, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0x30, 0x57, 0x06, 0x09, 0x2A,
      0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0D, 0x30, 0x4A, 0x30, 0x29, 0x06, 0x09, 0x2A, 0x86,
      0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0C, 0x30, 0x1C, 0x04, 0x08, 0xF2, 0xB6, 0xB0, 0x41, 0x12,
      0x86, 0x7D, 0x03, 0x02, 0x02, 0x08, 0x00, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86, 0xF7,
      0x0D, 0x02, 0x09, 0x05, 0x00, 0x30, 0x1D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04,
      0x01, 0x2A, 0x04, 0x10, 0x5B, 0x6F, 0x30, 0xAC, 0xE3, 0x73, 0xE8, 0x09, 0xD3, 0xC2, 0x64, 0xBF,
      0x0D, 0xBD, 0x85, 0x64, 0x80, 0x82, 0x03, 0x70, 0x26, 0x1C, 0x72, 0xDF, 0xCF, 0xD1, 0x40, 0xB0,
      0x31, 0xE6, 0x83, 0x5A, 0x54, 0xC8, 0x0E, 0xAD, 0xE5, 0xD6, 0xDF, 0x89, 0xCF, 0x2E, 0xB3, 0xF9,
      0x99, 0xAA, 0x2C, 0x57, 0x73, 0x4B, 0x83, 0x1E, 0xBF, 0x1E, 0x69, 0x9E, 0xEA, 0xDC, 0x23, 0xB4,
      0xF1, 0xCC, 0xDC, 0x4C, 0xCB, 0xA0, 0xE9, 0xE9, 0xA5, 0x74, 0x0F, 0x27, 0x1E, 0x5B, 0xA9, 0x3A,
      0x77, 0x51, 0x9E, 0x3F, 0x65, 0x60, 0xB8, 0x66, 0x73, 0x54, 0x62, 0xE6, 0x85, 0x40, 0xED, 0xD9,
      0x4C, 0x7C, 0x32, 0xE6, 0xAB, 0x07, 0xF9, 0x3A, 0x4D, 0xBD, 0xC3, 0x0C, 0x9D, 0x7D, 0xAE, 0x4D,
      0x4D, 0xDD, 0x02, 0x42, 0x5B, 0x68, 0xC8, 0x6E, 0x00, 0x24, 0xBD, 0xEA, 0xF8, 0xBF, 0x91, 0x2B,
      0x41, 0x7D, 0x3F, 0xD2, 0x87, 0xC3, 0xA4, 0x6A, 0x43, 0xA4, 0x1E, 0xCC, 0xCF, 0x02, 0x79, 0x6A,
      0x9B, 0x82, 0xDF, 0x3E, 0x3B, 0x58, 0x14, 0xF6, 0x5E, 0xCD, 0xF1, 0x1F, 0x34, 0x92, 0xF8, 0xA1,
      0xE3, 0xC9, 0x39, 0xDF, 0x58, 0xD4, 0x45, 0x14, 0x4F, 0x53, 0x13, 0x3E, 0xBD, 0x9F, 0x1D, 0x42,
      0xC6, 0x07, 0x1B, 0x89, 0xAF, 0x97, 0x1C, 0xD2, 0x78, 0x6F, 0x14, 0xDF, 0xC6, 0xDA, 0x44, 0x9C,
      0x5A, 0x11, 0x6E, 0xD1, 0x4F, 0xC0, 0x12, 0x87, 0xFD, 0xEA, 0x3F, 0xE3, 0x7C, 0x48, 0x12, 0x37,
      0x3A, 0x7C, 0x42, 0xA3, 0x18, 0x1E, 0x16, 0x76, 0x98, 0x90, 0xDA, 0x38, 0x38, 0x5D, 0xBA, 0x35,
      0x6F, 0xA1, 0x23, 0xF1, 0x62, 0xA4, 0xB2, 0x25, 0xA1, 0x1B, 0xB9, 0xDF, 0xE7, 0x5E, 0xB0, 0xDB,
      0xEC, 0x55, 0xD6, 0x67, 0xC0, 0x38, 0x5F, 0x87, 0x1E, 0x35, 0x89, 0x2C, 0x99, 0xBF, 0xE8, 0x6F,
      0x0F, 0x24, 0x92, 0x84, 0x32, 0x37, 0xB4, 0xB6, 0x4E, 0x03, 0xEE, 0xEB, 0xE5, 0x86, 0x33, 0x15,
      0xD0, 0x34, 0x9F, 0x25, 0x7E, 0x51, 0x89, 0x37, 0xB9, 0xC5, 0xCA, 0x95, 0x68, 0x8C, 0x0C, 0x0A,
      0xBC, 0xB1, 0x49, 0x00, 0x81, 0x03, 0x99, 0xEC, 0x5F, 0x73, 0x81, 0xAD, 0x50, 0x6E, 0x2C, 0x5C,
      0xEB, 0xF7, 0xA9, 0xCB, 0x1C, 0x3D, 0xFF, 0x6F, 0x24, 0xCE, 0x70, 0x10, 0xC6, 0xC1, 0x21, 0xA0,
      0xCC, 0xD1, 0x31, 0x26, 0x99, 0x54, 0xE7, 0xE3, 0xD7, 0x10, 0x77, 0x9C, 0xB6, 0x65, 0x2D, 0xDC,
      0x46, 0x93, 0x2F, 0x17, 0x24, 0x44, 0x0E, 0xA6, 0xBA, 0x11, 0x9F, 0xD9, 0x46, 0xBE, 0x96, 0xE7,
      0x66, 0x63, 0x44, 0x85, 0x32, 0x02, 0x8C, 0xDD, 0x4E, 0x2B, 0xB4, 0x8F, 0x80, 0x55, 0x7C, 0x76,
      0xD3, 0x1C, 0xFB, 0xE3, 0x7F, 0xE2, 0x51, 0x4D, 0xCE, 0xB4, 0x45, 0x68, 0x6A, 0xD0, 0xE1, 0x29,
      0xFD, 0x97, 0x76, 0x72, 0xAD, 0x99, 0xEC, 0x0E, 0x95, 0xDB, 0x28, 0xDD, 0xA8, 0xEA, 0x49, 0x97,
      0x19, 0xA6, 0x6C, 0xC1, 0x47, 0x46, 0xE7, 0x40, 0x24, 0xCE, 0x3C, 0x8F, 0xE7, 0xF8, 0x80, 0x60,
      0x7B, 0x39, 0x9D, 0x4C, 0x6E, 0xE4, 0xB9, 0xEB, 0x96, 0x85, 0x35, 0xA8, 0xCC, 0x2A, 0xF0, 0xE9,
      0x5B, 0x8C, 0xFB, 0x75, 0x19, 0x3F, 0xFA, 0x7D, 0xED, 0xDF, 0x99, 0xE6, 0x13, 0x0F, 0xB3, 0x5D,
      0x15, 0x33, 0x67, 0x5B, 0x3E, 0xAA, 0xF8, 0x5C, 0xA5, 0xC4, 0xD7, 0xA4, 0x7A, 0x17, 0xE9, 0xAA,
      0x4E, 0x40, 0x49, 0x18, 0xA6, 0xE3, 0x5F, 0xAA, 0x79, 0xC6, 0x9E, 0xD0, 0xD3, 0x31, 0xAA, 0xFC,
      0x97, 0x08, 0xD3, 0x53, 0xE2, 0xB3, 0xAD, 0x48, 0x5D, 0x62, 0x1C, 0x58, 0x6E, 0x86, 0x40, 0x51,
      0x0B, 0x2B, 0x20, 0x46, 0xD2, 0xC4, 0xC0, 0x2A, 0xBA, 0x6C, 0xCF, 0x4E, 0xB1, 0x95, 0x7F, 0x93,
      0xF4, 0xDC, 0x5C, 0xCA, 0xAD, 0xA2, 0xA0, 0x8F, 0xD1, 0xC5, 0xE6, 0xEF, 0x5C, 0xB7, 0xE3, 0x04,
      0x5E, 0xA4, 0x8B, 0x3F, 0x01, 0x75, 0x45, 0x9F, 0xD7, 0x35, 0x1B, 0x13, 0x08, 0x1A, 0x5D, 0xFD,
      0x22, 0xCE, 0x7C, 0x04, 0x53, 0x37, 0x77, 0xA8, 0x6E, 0x33, 0xD3, 0xBB, 0x8F, 0x7F, 0xE0, 0x90,
      0xE4, 0xEA, 0xAF, 0xD3, 0x7D, 0x66, 0xC4, 0xCF, 0x16, 0xC7, 0x45, 0xD9, 0xAC, 0x2E, 0xCB, 0x79,
      0x4A, 0x38, 0x11, 0x52, 0x20, 0x08, 0xF2, 0x42, 0xD8, 0xCC, 0x91, 0xD0, 0x0D, 0xF7, 0x35, 0xD3,
      0x42, 0x87, 0x56, 0x51, 0xFC, 0xBB, 0x2E, 0xDE, 0xAA, 0x1A, 0x04, 0xAF, 0x84, 0x2E, 0x19, 0xE9,
      0x41, 0xE0, 0xBE, 0xE5, 0xF1, 0x75, 0x9F, 0xE8, 0x26, 0xCB, 0xF0, 0x1C, 0x24, 0x13, 0x94, 0x10,
      0xF3, 0x8E, 0xF3, 0x03, 0x1B, 0x38, 0xC1, 0xC5, 0xA4, 0x6C, 0xCA, 0x13, 0xC6, 0x34, 0x4B, 0x18,
      0x60, 0x42, 0x5B, 0x39, 0xAB, 0x51, 0xCB, 0x6D, 0xAC, 0x3D, 0x2A, 0x49, 0x15, 0x5C, 0xEE, 0xC4,
      0x37, 0xC4, 0x0D, 0xF9, 0x9E, 0x68, 0xD0, 0x9C, 0x3C, 0x5F, 0xC1, 0xEC, 0x71, 0xC2, 0x35, 0xAB,
      0x3C, 0x2A, 0xDF, 0xB8, 0xAE, 0xD1, 0x65, 0xA1, 0x04, 0x31, 0xEB, 0xF3, 0xF8, 0x82, 0x7D, 0xDF,
      0x89, 0xE9, 0x8E, 0x4C, 0xB8, 0xDD, 0x38, 0x61, 0x75, 0x2F, 0x9F, 0xB7, 0x61, 0x97, 0xDD, 0x98,
      0x75, 0x62, 0x68, 0x5A, 0x10, 0x47, 0x28, 0x25, 0x60, 0x55, 0xE3, 0x06, 0x42, 0x24, 0x81, 0x42,
      0xC0, 0xA5, 0x1B, 0x8F, 0xAA, 0xF0, 0x11, 0x49, 0x95, 0xB9, 0x3B, 0x9F, 0x4A, 0xA3, 0xE3, 0x3A,
      0x72, 0xB5, 0x4A, 0x1F, 0x71, 0xD9, 0x97, 0x59, 0x2F, 0x10, 0xE8, 0xED, 0x6A, 0x6C, 0x03, 0xCF,
      0x4A, 0x21, 0x05, 0x9E, 0xBD, 0x5C, 0x94, 0x08, 0xE3, 0x9C, 0x10, 0xEA, 0x19, 0xDA, 0x14, 0xDC,
      0xC1, 0xB3, 0x56, 0xC0, 0x78, 0x39, 0x0B, 0x4B, 0x46, 0x57, 0x9F, 0xA0, 0x9C, 0x76, 0xB9, 0x09,
      0x21, 0x70, 0x87, 0x26, 0x76, 0x04, 0xB0, 0xA0, 0x96, 0x80, 0x4C, 0x57, 0xB0, 0x95, 0xE0, 0x2B,
      0xF3, 0x31, 0x9D, 0x31, 0xED, 0x4C, 0xC2, 0xFD, 0x8A, 0xB6, 0xCD, 0x0E, 0x2F, 0xD4, 0x61, 0x61,
      0xE6, 0xE4, 0x34, 0x4C, 0x55, 0x9D, 0xF1, 0xE2, 0xE7, 0xB0, 0xE6, 0xF7, 0x74, 0x71, 0x4D, 0x9B,
      0xC8, 0x23, 0xFE, 0x75, 0xC6, 0x2B, 0x23, 0xE6, 0x26, 0xAD, 0x87, 0x97, 0x14, 0xD4, 0x55, 0xB4,
      0x3A, 0x00, 0xC7, 0x1A, 0x32, 0x05, 0x7E, 0xC7, 0xDB, 0x9A, 0x38, 0x57, 0xAC, 0x12, 0xF4, 0xE2,
      0x93, 0xBA, 0xEF, 0x86, 0x37, 0x00, 0x94, 0x1C, 0x31, 0x61, 0xC0, 0xDD, 0x14, 0x2C, 0x4C, 0xA1,
      0x73, 0x80, 0x55, 0xBF, 0x2C, 0x4C, 0x2D, 0xED, 0x99, 0xE5, 0xF5, 0x27, 0x30, 0x6B, 0x28, 0xF1,
      0x4E, 0x41, 0x9F, 0xF0, 0x96, 0x84, 0x28, 0xF8, 0x30, 0x82, 0x05, 0x84, 0x06, 0x09, 0x2A, 0x86,
      0x48, 0x86, 0xF7, 0x0D, 0x01, 0x07, 0x01, 0xA0, 0x82, 0x05, 0x75, 0x04, 0x82, 0x05, 0x71, 0x30,
      0x82, 0x05, 0x6D, 0x30, 0x82, 0x05, 0x69, 0x06, 0x0B, 0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01,
      0x0C, 0x0A, 0x01, 0x02, 0xA0, 0x82, 0x05, 0x31, 0x30, 0x82, 0x05, 0x2D, 0x30, 0x57, 0x06, 0x09,
      0x2A, 0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0D, 0x30, 0x4A, 0x30, 0x29, 0x06, 0x09, 0x2A,
      0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x05, 0x0C, 0x30, 0x1C, 0x04, 0x08, 0x80, 0x8B, 0x77, 0x95,
      0x38, 0xE2, 0x22, 0x96, 0x02, 0x02, 0x08, 0x00, 0x30, 0x0C, 0x06, 0x08, 0x2A, 0x86, 0x48, 0x86,
      0xF7, 0x0D, 0x02, 0x09, 0x05, 0x00, 0x30, 0x1D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03,
      0x04, 0x01, 0x2A, 0x04, 0x10, 0x8C, 0xE9, 0xF9, 0x30, 0xBD, 0x53, 0x33, 0x5B, 0x42, 0x48, 0x4D,
      0x67, 0x38, 0x8C, 0x91, 0x01, 0x04, 0x82, 0x04, 0xD0, 0x7D, 0xCC, 0x58, 0x81, 0x06, 0x63, 0x04,
      0x01, 0xD3, 0x79, 0x4C, 0x0A, 0x19, 0xD1, 0x61, 0xE6, 0xCB, 0x46, 0x56, 0x96, 0x9C, 0x63, 0xC6,
      0xAA, 0xF9, 0x89, 0xF0, 0xFC, 0x06, 0x85, 0x00, 0x38, 0xA9, 0x23, 0xCF, 0xC5, 0xC1, 0xCF, 0x41,
      0xDB, 0xB9, 0x9F, 0xE9, 0x33, 0x7B, 0x9A, 0xE4, 0x1C, 0x31, 0x6F, 0xB6, 0xF2, 0xA1, 0x64, 0xE2,
      0x74, 0xE6, 0x20, 0xC8, 0x23, 0xF0, 0x3F, 0x15, 0x7D, 0x85, 0x9C, 0xE9, 0x98, 0x7F, 0x3C, 0x48,
      0xE2, 0x65, 0x42, 0x96, 0x66, 0x04, 0x88, 0xE0, 0xD3, 0xC6, 0x1A, 0x4E, 0xAB, 0x08, 0x11, 0x21,
      0xDF, 0x3E, 0x99, 0xF5, 0x07, 0xFC, 0xE1, 0xFC, 0xEF, 0xB7, 0x6D, 0xAE, 0x1B, 0x32, 0xAF, 0x7E,
      0x8D, 0xBC, 0x4D, 0x1C, 0xCA, 0x73, 0x49, 0x4A, 0x65, 0x74, 0x52, 0x76, 0xC6, 0xBD, 0xC4, 0x34,
      0x3C, 0xAB, 0xBE, 0x18, 0x54, 0x4B, 0x1C, 0xFB, 0xB0, 0x46, 0x7C, 0x37, 0x2C, 0xF5, 0x2A, 0xCE,
      0xB3, 0x57, 0x82, 0x6F, 0xDB, 0x59, 0x59, 0xF8, 0xF6, 0x75, 0xE3, 0x87, 0x93, 0xE7, 0x6F, 0xDD,
      0x81, 0xC8, 0xDC, 0x97, 0x82, 0xE7, 0xA5, 0x18, 0x40, 0x26, 0x04, 0x5A, 0x5C, 0xE4, 0x1C, 0x01,
      0xC3, 0xAE, 0xC7, 0x35, 0x34, 0xD6, 0x07, 0x7B, 0xC8, 0x5A, 0xD0, 0xF3, 0xB6, 0xE8, 0xBD, 0x7F,
      0x15, 0xC6, 0x0A, 0xD3, 0x33, 0x5C, 0xC9, 0x24, 0xDC, 0xF1, 0x90, 0x0C, 0x06, 0x27, 0x45, 0x6A,
      0xCD, 0xDC, 0x1D, 0xBF, 0xB7, 0x17, 0xF2, 0xD2, 0xEE, 0x64, 0x22, 0x8C, 0x7C, 0x50, 0x4F, 0x1D,
      0x2C, 0x55, 0xA4, 0x67, 0x0F, 0xE5, 0x3F, 0x3A, 0x83, 0x32, 0x62, 0x84, 0x2D, 0x35, 0x0D, 0xA1,
      0x5E, 0xE2, 0x3C, 0x6E, 0xB1, 0x77, 0x75, 0x41, 0xD4, 0x77, 0x9B, 0xAF, 0xB7, 0xD7, 0x1D, 0x37,
      0x28, 0xF6, 0xEE, 0x20, 0xA4, 0x86, 0xD3, 0x97, 0xCD, 0x4A, 0xB3, 0xF3, 0xD7, 0x5F, 0x29, 0x4B,
      0xB2, 0x5A, 0x90, 0xBB, 0x21, 0xA3, 0xD1, 0xC5, 0x84, 0x04, 0x00, 0xB2, 0x20, 0x81, 0xB4, 0xB8,
      0x47, 0x41, 0xBC, 0xAA, 0xA5, 0x33, 0xD7, 0x88, 0xA9, 0xB1, 0xC1, 0x31, 0x55, 0x2C, 0xC7, 0x8C,
      0xDC, 0x3E, 0x3D, 0xD3, 0xA4, 0x7D, 0xF6, 0xBE, 0x4D, 0x96, 0xCD, 0x00, 0x43, 0xFD, 0x67, 0x36,
      0x44, 0x7A, 0x68, 0x63, 0xAB, 0x16, 0x9C, 0xAB, 0xB3, 0xF1, 0xC4, 0xC3, 0xC4, 0x67, 0xF3, 0x66,
      0x1B, 0xB5, 0x49, 0x31, 0xDE, 0xFD, 0xAA, 0x2A, 0xFD, 0x0A, 0x9D, 0xE2, 0x6F, 0x6A, 0x8D, 0x3E,
      0xE8, 0x0E, 0xB5, 0xD3, 0x9C, 0xA4, 0xA6, 0xBE, 0xA6, 0x40, 0xC2, 0x84, 0x54, 0xFA, 0x33, 0x5C,
      0x50, 0x84, 0xEA, 0x9D, 0xF2, 0x1C, 0x12, 0x91, 0xFB, 0xE0, 0xDE, 0x33, 0x92, 0x71, 0x23, 0x42,
      0x99, 0xD0, 0x67, 0x0A, 0xD3, 0xCF, 0xD6, 0x01, 0xBC, 0x5C, 0x8F, 0xCC, 0xCE, 0x61, 0x65, 0x7F,
      0x66, 0x8A, 0xA2, 0x81, 0x83, 0xBE, 0xF9, 0xBF, 0xEB, 0x37, 0x9F, 0x7C, 0x56, 0xA7, 0x21, 0x9C,
      0xE1, 0xDF, 0x01, 0xC1, 0x3D, 0xB7, 0xC5, 0x48, 0x5A, 0x5B, 0x0B, 0x99, 0x56, 0x4E, 0x04, 0xD1,
      0x11, 0x1D, 0x11, 0xFF, 0x9D, 0x4E, 0x7A, 0xA7, 0x94, 0x32, 0xDE, 0xD9, 0x10, 0xCB, 0x27, 0x26,
      0xF5, 0x17, 0xAB, 0x53, 0xD7, 0xDA, 0xD5, 0x5C, 0xB1, 0xA0, 0x01, 0x0C, 0x0A, 0x85, 0xA8, 0xFC,
      0xAE, 0xB9, 0xA4, 0xAA, 0x0D, 0x52, 0xC2, 0xEF, 0xF6, 0x6A, 0x1C, 0x62, 0x47, 0xF3, 0x16, 0x37,
      0x67, 0xF4, 0xA7, 0x30, 0x99, 0x6F, 0xF1, 0x3A, 0xAE, 0xC2, 0x4A, 0xC9, 0x86, 0xB8, 0x2F, 0xE4,
      0x3A, 0x7D, 0x61, 0x24, 0x97, 0x1A, 0x54, 0xAB, 0xF4, 0x43, 0x83, 0xD9, 0xF7, 0x43, 0x59, 0x00,
      0x59, 0x36, 0x00, 0x90, 0xB9, 0x48, 0xDE, 0x60, 0x7F, 0xF0, 0xCF, 0xC5, 0x92, 0x9B, 0xF4, 0x2C,
      0x64, 0x47, 0xA5, 0xCE, 0x08, 0x7A, 0xE2, 0x9D, 0xD0, 0xA3, 0xE6, 0xCB, 0x10, 0x13, 0xA7, 0xC3,
      0x50, 0xE3, 0xD2, 0xD5, 0x1E, 0x10, 0x93, 0xEA, 0x5E, 0x48, 0x7C, 0xA8, 0xB9, 0x7B, 0x59, 0x20,
      0x94, 0x90, 0x15, 0xD4, 0xCD, 0xB4, 0x6F, 0x3F, 0x1D, 0xBD, 0xB1, 0xDB, 0x98, 0x3D, 0x5A, 0x23,
      0xEF, 0x64, 0x9E, 0xF1, 0xC4, 0x93, 0x11, 0xEF, 0x47, 0x7C, 0x92, 0xC8, 0xE7, 0xCC, 0xCA, 0xC0,
      0x26, 0x3A, 0x03, 0x5C, 0x20, 0x46, 0x85, 0x55, 0x5B, 0x93, 0x30, 0x0C, 0xA5, 0x99, 0x53, 0xA6,
      0xAA, 0xEA, 0xDC, 0x18, 0x14, 0xF6, 0x7F, 0x7C, 0x95, 0x72, 0x5F, 0xC1, 0x9D, 0x53, 0x21, 0xAA,
      0x7E, 0x2C, 0xEF, 0xFB, 0xB0, 0xA4, 0xDA, 0x85, 0xCB, 0xE1, 0x37, 0xC6, 0xC5, 0x6E, 0x85, 0x5A,
      0xC4, 0x10, 0xB2, 0x91, 0x43, 0xD2, 0xDC, 0x98, 0x46, 0x41, 0xC8, 0x52, 0x4E, 0x85, 0x64, 0x9A,
      0x38, 0x36, 0xF7, 0x90, 0x37, 0x15, 0x67, 0x11, 0xAF, 0x45, 0xD0, 0x44, 0x78, 0xB1, 0xA3, 0x4E,
      0x4D, 0xEC, 0x0D, 0xC7, 0x69, 0xC3, 0x4B, 0x2D, 0x30, 0x4E, 0x83, 0x5B, 0x29, 0x80, 0x93, 0x63,
      0x67, 0xFC, 0xBB, 0xBC, 0x0E, 0xD6, 0xF3, 0x29, 0xEB, 0x51, 0x0B, 0x20, 0x52, 0xFE, 0x1F, 0xDD,
      0x0B, 0x86, 0x3A, 0xD8, 0x9B, 0xD1, 0x53, 0x28, 0xB8, 0x6D, 0x44, 0x37, 0xE3, 0xAA, 0x00, 0x5B,
      0x72, 0xAF, 0x6D, 0x86, 0xBE, 0x8F, 0xB1, 0x83, 0x14, 0xF3, 0xEA, 0x5C, 0x4F, 0x4C, 0xF7, 0xAE,
      0x7B, 0xBD, 0x08, 0x14, 0x3D, 0x68, 0x7A, 0x20, 0x3B, 0x80, 0x1D, 0x1A, 0x6E, 0x8F, 0x05, 0x19,
      0xB4, 0xD0, 0xFC, 0x6D, 0x9E, 0xD0, 0x89, 0x13, 0x42, 0x50, 0xB2, 0xC0, 0xCC, 0xF9, 0x23, 0x6F,
      0xB3, 0x9B, 0xEC, 0x80, 0x87, 0x67, 0x0B, 0xE6, 0xE3, 0x66, 0x9C, 0x17, 0x51, 0x73, 0x2F, 0xDD,
      0xBE, 0x5B, 0x3F, 0xDA, 0x71, 0x39, 0x96, 0x1C, 0xF6, 0x92, 0x3B, 0xFE, 0x69, 0x89, 0x56, 0x20,
      0x19, 0x19, 0x3F, 0xF5, 0x9B, 0x88, 0x37, 0xFF, 0x9A, 0x4D, 0x61, 0xFB, 0x50, 0x03, 0x97, 0x86,
      0xE1, 0xA7, 0x99, 0x57, 0xDD, 0x8A, 0x96, 0x04, 0x59, 0xE8, 0xDE, 0xD0, 0x29, 0x49, 0xB1, 0x91,
      0xD0, 0x7A, 0x63, 0xEC, 0x90, 0x7D, 0x5C, 0xEA, 0x2D, 0x6A, 0xCE, 0xF7, 0x7B, 0x5E, 0xC2, 0xEA,
      0x4A, 0x10, 0x0A, 0x8C, 0xEF, 0x57, 0xBF, 0xC6, 0x34, 0xBA, 0xD3, 0x28, 0xE8, 0x67, 0x58, 0x1A,
      0xCA, 0x66, 0xBF, 0xE0, 0x68, 0x78, 0xE8, 0x70, 0xEE, 0x54, 0x76, 0x5A, 0x7E, 0x9B, 0x07, 0x70,
      0x45, 0x2D, 0x82, 0x6C, 0x98, 0xB1, 0x2E, 0x95, 0x3C, 0xD5, 0xEC, 0x8B, 0x34, 0xE2, 0x17, 0xF2,
      0x92, 0x4B, 0xFC, 0xD9, 0xB0, 0xB0, 0x93, 0x9A, 0x91, 0x3E, 0x13, 0xED, 0x0A, 0x0F, 0x4D, 0xE4,
      0xBD, 0x8C, 0x4C, 0xB6, 0x6E, 0xF5, 0x83, 0x90, 0x5D, 0xA6, 0xCB, 0xD1, 0x41, 0x4F, 0xAC, 0x9A,
      0xBD, 0x70, 0x38, 0xDD, 0x0F, 0x8E, 0xD4, 0x97, 0x1E, 0x3C, 0x48, 0x24, 0x47, 0x28, 0xCD, 0xE4,
      0xBB, 0x7A, 0x52, 0x2A, 0x6B, 0xBF, 0xCB, 0xA5, 0xDC, 0x6E, 0xAD, 0xF4, 0xB0, 0xA9, 0x28, 0x15,
      0x36, 0x45, 0xD7, 0x76, 0x94, 0x5E, 0x2A, 0x57, 0xDA, 0x0B, 0x78, 0x71, 0x29, 0x17, 0xA8, 0x51,
      0x08, 0xEB, 0x93, 0x6E, 0x97, 0xAE, 0x41, 0xD4, 0xF3, 0xAA, 0x64, 0x54, 0x7E, 0xC8, 0x48, 0xE8,
      0xED, 0xE3, 0x49, 0x73, 0xA4, 0x50, 0x5D, 0x31, 0xE7, 0xB6, 0x8F, 0xC3, 0x60, 0x5C, 0x51, 0x7C,
      0x03, 0xC3, 0xF1, 0xD5, 0x00, 0x79, 0x1A, 0x1B, 0xD3, 0x62, 0xBC, 0x44, 0x07, 0x3B, 0xD2, 0x81,
      0x4A, 0x32, 0x18, 0x26, 0x8B, 0x7A, 0xB6, 0xB6, 0x9E, 0x3F, 0x46, 0x37, 0x33, 0x5F, 0xE6, 0x76,
      0x24, 0x9E, 0xCA, 0x9F, 0xBB, 0x1E, 0x51, 0x97, 0xFF, 0xAF, 0x33, 0x11, 0xC2, 0x7C, 0xBB, 0x81,
      0x12, 0x6A, 0xB2, 0x18, 0x6A, 0x8F, 0x13, 0xEE, 0xAE, 0x2C, 0x4D, 0x45, 0xD2, 0x08, 0xE8, 0xA5,
      0xE0, 0x31, 0xAD, 0x2E, 0x34, 0x9C, 0x74, 0xC7, 0x2E, 0xB6, 0x08, 0xB0, 0xE5, 0x72, 0x65, 0x59,
      0xBB, 0x9D, 0x87, 0x6E, 0x92, 0xB6, 0xF7, 0x50, 0x72, 0xA5, 0x23, 0x40, 0x71, 0x1D, 0x15, 0x89,
      0xD8, 0x8A, 0xF5, 0x6D, 0xF4, 0xE6, 0xEE, 0x0B, 0xF1, 0x59, 0xF9, 0xEF, 0xF5, 0x05, 0xF9, 0x50,
      0x54, 0x17, 0x06, 0x84, 0x9C, 0x6F, 0x7B, 0xC8, 0x95, 0xA2, 0x1E, 0x95, 0x20, 0x84, 0x4C, 0xB1,
      0x81, 0xCD, 0x9F, 0x83, 0xF2, 0x56, 0x38, 0x43, 0x57, 0xC2, 0x7A, 0x36, 0xA8, 0x37, 0x34, 0x4F,
      0x4E, 0x98, 0x44, 0xCC, 0x74, 0x8C, 0xAA, 0xBE, 0xFC, 0x4E, 0xF7, 0xA1, 0x86, 0x20, 0xA9, 0xE2,
      0x03, 0x4B, 0x02, 0xBA, 0x74, 0x9D, 0xD8, 0xF9, 0x2C, 0x34, 0xA1, 0xEB, 0x40, 0x5F, 0x7B, 0xB6,
      0xC9, 0xB7, 0x05, 0xA9, 0xD4, 0x0F, 0x40, 0xC4, 0x59, 0x88, 0xD5, 0x2F, 0x2C, 0xB4, 0x44, 0x11,
      0x4D, 0xA2, 0xDB, 0x58, 0x5A, 0xFB, 0xAF, 0x85, 0x16, 0x06, 0x8A, 0x14, 0x13, 0xCE, 0x63, 0xAD,
      0x3D, 0x3C, 0x08, 0x14, 0xAB, 0x31, 0xED, 0xCE, 0xD9, 0x26, 0xFF, 0xBA, 0x62, 0xAC, 0x4D, 0x75,
      0x2E, 0x91, 0xEE, 0x2A, 0xC0, 0x58, 0xDC, 0xDB, 0xA4, 0x31, 0x25, 0x30, 0x23, 0x06, 0x09, 0x2A,
      0x86, 0x48, 0x86, 0xF7, 0x0D, 0x01, 0x09, 0x15, 0x31, 0x16, 0x04, 0x14, 0x23, 0xDB, 0xDF, 0x54,
      0x4D, 0xA9, 0x3E, 0x01, 0x40, 0x84, 0xB8, 0xD9, 0x43, 0x07, 0x49, 0x51, 0x43, 0x06, 0xC1, 0xFE,
      0x30, 0x41, 0x30, 0x31, 0x30, 0x0D, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02,
      0x01, 0x05, 0x00, 0x04, 0x20, 0x4F, 0x22, 0xB2, 0x15, 0x61, 0x43, 0x38, 0x3C, 0xDB, 0xE3, 0x91,
      0x66, 0x02, 0x4A, 0x31, 0x43, 0x7E, 0x9C, 0x39, 0xFE, 0xB8, 0xB1, 0xE6, 0xE9, 0x2C, 0x48, 0xBB,
      0xE2, 0xC9, 0x0A, 0x77, 0x11, 0x04, 0x08, 0x3D, 0x0F, 0x43, 0x70, 0x68, 0xB2, 0x09, 0xB4, 0x02,
      0x02, 0x08, 0x00
   }
);
[[maybe_unused, nodiscard]]
#if (201806L <= __cpp_lib_bit_cast)
constexpr
#else
inline
#endif
std::string_view test_webthread_certificate_p12() noexcept
{
   return
   {
#if (201806L <= __cpp_lib_bit_cast)
      std::bit_cast<char const *>(test_webthread_certificate_p12_raw.data()),
#else
      reinterpret_cast<char const *>(test_webthread_certificate_p12_raw.data()),
#endif
      test_webthread_certificate_p12_raw.size()
   };
}
